generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    account       Account?
    sessions      Session[]
    posts         Post[]
    likes         Like[]
    followers     User[]    @relation(name: "Followers")
    following     User[]    @relation(name: "Followers")
    createdAt     DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id           String   @id @unique @default(uuid())
    content      String
    createdAt    DateTime @default(now())
    author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId     String
    embeddedGif  String?
    embeddedPost Post?    @relation(name: "repost", fields: [repostId], references: [id], onDelete: Cascade)
    reposts      Post[]   @relation(name: "repost")
    repostId     String?
    likes        Like[]
}

model Like {
    userId String
    postId String
    user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
    post   Post?  @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
}
